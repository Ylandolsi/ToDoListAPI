// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToDoLIstAPi.DbContext;

#nullable disable

namespace ToDoLIstAPi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Entities.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Write the project documentation for the new API.",
                            DueDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Title = "Complete Documentation",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Develop the user authentication feature for the app.",
                            DueDate = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Title = "Implement New Feature",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Resolve the issue with the login API endpoint.",
                            DueDate = new DateTime(2025, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            Title = "Fix Bug in API",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Modify the database schema for the new feature.",
                            DueDate = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Title = "Update Database Schema",
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            Description = "Refactor the codebase to improve performance and readability.",
                            DueDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Title = "Refactor Code",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Review the code submitted by the team for the latest feature.",
                            DueDate = new DateTime(2025, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = true,
                            Title = "Conduct Code Review",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Write unit tests for the new user profile feature.",
                            DueDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Title = "Write Unit Tests",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Deploy the application to the staging environment.",
                            DueDate = new DateTime(2025, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Title = "Deploy Application",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "Backup all the relevant databases before the deployment.",
                            DueDate = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Title = "Create Database Backups",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Yassine",
                            PasswordHash = "$2a$11$143FvUPdT95WWhJS3gP2JuDpj3zyezQC5Q8104ioM1YBKOH2UR3qi",
                            Role = "Admin",
                            Username = "yassine",
                            position = "Software Developer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fatima",
                            PasswordHash = "$2a$11$BN6yt1TSvhtJUyrA3ezN6OhJIS7O3pTv3H0TVxTtglyURJBCjI3z2",
                            Role = "Admin",
                            Username = "fatima",
                            position = "Project Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ahmed",
                            PasswordHash = "$2a$11$UiFQw1BdHwK1C13FyCc4G.ZzZZEToQbWOr12CGkyonsL11DTwnE8S",
                            Role = "employee",
                            Username = "ahmed",
                            position = "Data Scientist"
                        });
                });

            modelBuilder.Entity("Models.Entities.Tasks", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
